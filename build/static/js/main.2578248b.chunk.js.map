{"version":3,"sources":["logo.svg","axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backdropPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2578248b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row( {title, fetchUrl, isLargeRow} ) {\r\n    const [movies,setMovies]= useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    // a snippet of code whch runs on specific condition //\r\n    useEffect( ()=>{\r\n        // if[], runs once  & dont run again //\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    },[fetchUrl]);\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n          autoplay: 1,\r\n        },\r\n      };\r\n\r\n      const handleClick =(movie) =>{\r\n          if(trailerUrl){\r\n              setTrailerUrl(\"\");\r\n          }\r\n          else{\r\n              movieTrailer(movie?.name || \"\")\r\n              .then(( url) =>{\r\n                  const urlParams=new URLSearchParams(new URL(url).search);\r\n                  setTrailerUrl(urlParams.get('v'));\r\n              })\r\n              .catch((error) => console.log(error));\r\n          }\r\n\r\n      };\r\n\r\n\r\nconsole.table(movies);\r\nconst s=\"row__poster\";\r\nconst s1=\"row__poster row__posterLarge\";\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title} </h2>\r\n     \r\n            <div className=\"row__posters\">\r\n                \r\n                {movies.map( movie => (\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={(isLargeRow ? s1 : s)}\r\n                    src={base_url+(isLargeRow ? movie.poster_path : movie.backdrop_path)} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} /> }\r\n\r\n            \r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Row;","const API_KEY = \"9e68282621e5b972f6f4943a568918ec\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n  };\r\n  \r\n  export default requests;","import React, {useEffect, useState} from 'react';\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\nuseEffect( () =>{\r\n    async function fetchData() {\r\n        const request = await axios.get(requests.fetchNetflixOriginals);\r\n        setMovie(\r\n            request.data.results[\r\n              Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]\r\n          );\r\n     \r\n    }\r\n    fetchData();\r\n\r\n},[])\r\nconsole.log(movie);\r\n\r\n\r\nfunction truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\nconst s2=movie.backdrop_path;\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backdropPosition: \"center center\",\r\n          }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n\r\n                <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List </button>\r\n        </div>\r\n\r\n        <h1 className=\"banner__description\">{truncate(movie?.overview, 200)}</h1>\r\n\r\n            </div>\r\n\r\n            <div className=\"banner__fadeBottom\"></div>\r\n\r\n       \r\n\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React , { useEffect, useState } from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n      window.addEventListener(\"scroll\", () => {\r\n        if (window.scrollY > 100) {\r\n          handleShow(true);\r\n        } else {\r\n          handleShow(false);\r\n        }\r\n      });\r\n      return () => {\r\n        window.removeEventListener(\"scroll\");\r\n      };\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n               <img\r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n        <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"Avatar\"\r\n      />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n     <Banner />\n     <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true} />\n     <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n     <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}